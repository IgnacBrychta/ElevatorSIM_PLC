#srcfile 'C:\USERS\IGN·C\DOCUMENTS\PLC\WINTER_PLC\07_VYTAH\PRGMAIN.ST'

#defpou VisualizeQueue
  bool __fc__VisualizeQueue,
  int index
#reg VisualizeQueue  __Instance__VisualizeQueue


#defpou EnqueueFloor
  bool __fc__EnqueueFloor,
  int floorToEnqueue,
  int index
#reg EnqueueFloor  __Instance__EnqueueFloor


#defpou EnqueueUpperFloor
  bool __fc__EnqueueUpperFloor,
  int floorToEnqueue,
  int index
#reg EnqueueUpperFloor  __Instance__EnqueueUpperFloor


#defpou EnqueueLowerFloor
  bool __fc__EnqueueLowerFloor,
  int floorToEnqueue,
  int index
#reg EnqueueLowerFloor  __Instance__EnqueueLowerFloor


#defpou EmptyUpperAndLowerQueue
  bool __fc__EmptyUpperAndLowerQueue,
  int index
#reg EmptyUpperAndLowerQueue  __Instance__EmptyUpperAndLowerQueue


#defpou ShiftQueueLeft
  bool __fc__ShiftQueueLeft,
  int index,
  int nextIndex,
  int temp
#reg ShiftQueueLeft  __Instance__ShiftQueueLeft


#defpou IsAnyDoorOpened
  bool __fc__IsAnyDoorOpened,
  int index  ; Comment 
#reg IsAnyDoorOpened  __Instance__IsAnyDoorOpened


#defpou DequeueFloor
  int __fc__DequeueFloor,
  int dequeuedFloor
#reg DequeueFloor  __Instance__DequeueFloor


#defpou IsFloorAlreadyEnqueued
  bool __fc__IsFloorAlreadyEnqueued,
  int index,
  int floor
#reg IsFloorAlreadyEnqueued  __Instance__IsFloorAlreadyEnqueued


#defpou IsQueueEmpty
  bool __fc__IsQueueEmpty,
  int index,
  bool empty
#reg IsQueueEmpty  __Instance__IsQueueEmpty


#defpou BubbleSortQueueLower
  bool __fc__BubbleSortQueueLower,
  int i,
  int j,
  int itemLeft,
  int itemRight,
  int temp
#reg BubbleSortQueueLower  __Instance__BubbleSortQueueLower


#defpou BubbleSortQueueUpper
  bool __fc__BubbleSortQueueUpper,
  int i,
  int j,
  int itemLeft,
  int itemRight,
  int temp
#reg BubbleSortQueueUpper  __Instance__BubbleSortQueueUpper


#defpou BubbleSortQueue
  bool __fc__BubbleSortQueue,
  int i,
  int j,
  int itemLeft,
  int itemRight,
  int temp
#reg BubbleSortQueue  __Instance__BubbleSortQueue


#defpou ElevatorSortQueue
  bool __fc__ElevatorSortQueue,
  int index,
  int item,
  int index2,
  int changes
#reg ElevatorSortQueue  __Instance__ElevatorSortQueue


#defpou CloseAllDoors
  bool __fc__CloseAllDoors,
  int index
#reg CloseAllDoors  __Instance__CloseAllDoors


#defpou CloseAllDoorsExceptForArg
  bool __fc__CloseAllDoorsExceptForArg,
  int index,
  int floorDoorToOpen
#reg CloseAllDoorsExceptForArg  __Instance__CloseAllDoorsExceptForArg


#defpou HandleDoors
  bool __fc__HandleDoors
#reg HandleDoors  __Instance__HandleDoors


#defpou ResetAllButtons
  bool __fc__ResetAllButtons,
  int index
#reg ResetAllButtons  __Instance__ResetAllButtons


#defpou HandleFloorSelection
  bool __fc__HandleFloorSelection
#reg HandleFloorSelection  __Instance__HandleFloorSelection


#defpou IsAnyButtonPressed
  bool __fc__IsAnyButtonPressed,
  int index
#reg IsAnyButtonPressed  __Instance__IsAnyButtonPressed


#defpou HandleButtons
  bool __fc__HandleButtons,
  int index
#reg HandleButtons  __Instance__HandleButtons


#defpou HandleMovement
  bool __fc__HandleMovement
#reg HandleMovement  __Instance__HandleMovement


#defpou IsAnyObstaclePresent
  bool __fc__IsAnyObstaclePresent,
  int index
#reg IsAnyObstaclePresent  __Instance__IsAnyObstaclePresent


#defpou HandleStopConditions
  bool __fc__HandleStopConditions
#reg HandleStopConditions  __Instance__HandleStopConditions


#defpou prgMain
  int index,
  int queuedFloor,
  int floorDifference

 
#srcfile 'C:\USERS\IGN·C\DOCUMENTS\PLC\WINTER_PLC\07_VYTAH\PRGMAIN.ST'
#pou VisualizeQueue
#srcline 2 ;FUNCTION VisualizeQueue : BOOL

#struct VisualizeQueue__temp__
  int P0__st__,
  string[82] PS0__st__,
  string[82] PSC__st__
#data byte _str_VisualizeQueue_0 = 
  '',0
#data byte _str_VisualizeQueue_1 = 
  ';',0
P     61
VisualizeQueue_L0:
 LINK __SizeOf(VisualizeQueue__temp__)
 NXT
; Initialize - variables
 LD   0
 WRX  __fc__VisualizeQueue
 WRX  index
; End initialize - variables
; Initialize - dynamic variables
; End initialize - dynamic variables
#srcline 6 ;  stringQueueRepresentation := '';
 LD   0   ; null string
 LEA  stringQueueRepresentation
 WRI  
 LEA  stringQueueRepresentation
 LD   80
 DST    ; Level 1
 LEA  _str_VisualizeQueue_0
 SCON 
#debug_left string stringQueueRepresentation
 PDST   ; Level 1
#srcline 7 ;  FOR index := 0 TO queueSize - 1 DO
 LD   int 0
 WRX  index
 LD   queueSize
#debug int queueSize
 EXTW 
 LD   int 1
 SUB
 EXTW
 WRY  P0__st__
VisualizeQueue_L1:
 LDX  index
 EXTW 
 LDY  P0__st__
 EXTW 
 GTS  
 JMD  VisualizeQueue_L2
 DBG  
#srcline 8 ;    stringQueueRepresentation := stringQueueRepresentation + ';' + INT_TO_STRING(queue[index]);
 LD   0   ; null string
 WRY  PS0__st__[0]
 LEAY PS0__st__[0]
 LD   80
 DST    ; Level 1
 LEA  stringQueueRepresentation
#debug string stringQueueRepresentation
 SCON 
 LEA  _str_VisualizeQueue_1
 SCON 
 LD   0   ; null string
 WRY  PSC__st__[0]
 LEAY PSC__st__[0]
 LD   80
 DST    ; Level 2
 LEA  queue
 LDX  index
#debug int index
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug int queue[index]
 EXTW 
 SCNV $0B30;  IEC_INT _TO_ IEC_STRING
 PDST   ; Level 2
 LEAY PSC__st__[0]

 SCON 
 PDST   ; Level 1
 LD   0   ; null string
 LEA  stringQueueRepresentation
 WRI  
 LEA  stringQueueRepresentation
 LD   80
 DST    ; Level 1
 LEAY PS0__st__[0]
 SCON 
#debug_left string stringQueueRepresentation
 PDST   ; Level 1
#srcline 9 ;  END_FOR;
 LDX  index
 LD   1
 ADD  
 EXTW 
 WRX  index
 JMP  VisualizeQueue_L1
VisualizeQueue_L2:
 NOP  -1
#srcline 10 ;END_FUNCTION
 PRV  
 LDX  __fc__VisualizeQueue
 ULNK
RET
E     61
#endpou 

#pou EnqueueFloor
#srcline 12 ;FUNCTION EnqueueFloor : BOOL

#struct EnqueueFloor__temp__
  int P0__st__
P     61
EnqueueFloor_L0:
 LINK __SizeOf(EnqueueFloor__temp__)
 NXT
; Initialize - variables
 LD   0
 WRX  __fc__EnqueueFloor
 WRX  index
; End initialize - variables
; Initialize - dynamic variables
; End initialize - dynamic variables
#srcline 20 ;  FOR index := 0 TO queueSize - 1 DO
 LD   int 0
 WRX  index
 LD   queueSize
#debug int queueSize
 EXTW 
 LD   int 1
 SUB
 EXTW
 WRY  P0__st__
EnqueueFloor_L1:
 LDX  index
 EXTW 
 LDY  P0__st__
 EXTW 
 GTS  
 JMD  EnqueueFloor_L2
 DBG  
#srcline 21 ;    IF queue[index] = queueDefaultValue THEN
 LEA  queue
 LDX  index
#debug int index
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug int queue[index]
 EXTW 
 LD   queueDefaultValue
#debug int queueDefaultValue
 EXTW 
 EQ
 JMC  EnqueueFloor_L3
#srcline 22 ;      queue[index] := floorToEnqueue;
 LDX  floorToEnqueue
#debug int floorToEnqueue
 EXTW 
 LEA  queue
 LDX  index
#debug int index
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRIW 
#debug_left int queue[index]
#srcline 23 ;      EXIT;//index := 1000; // break
 JMP  EnqueueFloor_L2
#srcline 24 ;    END_IF;
EnqueueFloor_L3:
#srcline 25 ;  END_FOR;
 LDX  index
 LD   1
 ADD  
 EXTW 
 WRX  index
 JMP  EnqueueFloor_L1
EnqueueFloor_L2:
 NOP  -1
#srcline 26 ;END_FUNCTION
 PRV  
 LDX  __fc__EnqueueFloor
 ULNK
RET
E     61
#endpou 

#pou EnqueueUpperFloor
#srcline 28 ;FUNCTION EnqueueUpperFloor : BOOL

#struct EnqueueUpperFloor__temp__
  int P0__st__
P     61
EnqueueUpperFloor_L0:
 LINK __SizeOf(EnqueueUpperFloor__temp__)
 NXT
; Initialize - variables
 LD   0
 WRX  __fc__EnqueueUpperFloor
 WRX  index
; End initialize - variables
; Initialize - dynamic variables
; End initialize - dynamic variables
#srcline 36 ;  FOR index := 0 TO queueSize - 1 DO
 LD   int 0
 WRX  index
 LD   queueSize
#debug int queueSize
 EXTW 
 LD   int 1
 SUB
 EXTW
 WRY  P0__st__
EnqueueUpperFloor_L1:
 LDX  index
 EXTW 
 LDY  P0__st__
 EXTW 
 GTS  
 JMD  EnqueueUpperFloor_L2
 DBG  
#srcline 37 ;    IF queueUpperFloors[index] = queueDefaultValue THEN
 LEA  queueUpperFloors
 LDX  index
#debug int index
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug int queueUpperFloors[index]
 EXTW 
 LD   queueDefaultValue
#debug int queueDefaultValue
 EXTW 
 EQ
 JMC  EnqueueUpperFloor_L3
#srcline 38 ;      queueUpperFloors[index] := floorToEnqueue;
 LDX  floorToEnqueue
#debug int floorToEnqueue
 EXTW 
 LEA  queueUpperFloors
 LDX  index
#debug int index
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRIW 
#debug_left int queueUpperFloors[index]
#srcline 39 ;      EXIT;
 JMP  EnqueueUpperFloor_L2
#srcline 40 ;    END_IF;
EnqueueUpperFloor_L3:
#srcline 41 ;  END_FOR;
 LDX  index
 LD   1
 ADD  
 EXTW 
 WRX  index
 JMP  EnqueueUpperFloor_L1
EnqueueUpperFloor_L2:
 NOP  -1
#srcline 42 ;END_FUNCTION
 PRV  
 LDX  __fc__EnqueueUpperFloor
 ULNK
RET
E     61
#endpou 

#pou EnqueueLowerFloor
#srcline 44 ;FUNCTION EnqueueLowerFloor : BOOL

#struct EnqueueLowerFloor__temp__
  int P0__st__
P     61
EnqueueLowerFloor_L0:
 LINK __SizeOf(EnqueueLowerFloor__temp__)
 NXT
; Initialize - variables
 LD   0
 WRX  __fc__EnqueueLowerFloor
 WRX  index
; End initialize - variables
; Initialize - dynamic variables
; End initialize - dynamic variables
#srcline 52 ;  FOR index := 0 TO queueSize - 1 DO
 LD   int 0
 WRX  index
 LD   queueSize
#debug int queueSize
 EXTW 
 LD   int 1
 SUB
 EXTW
 WRY  P0__st__
EnqueueLowerFloor_L1:
 LDX  index
 EXTW 
 LDY  P0__st__
 EXTW 
 GTS  
 JMD  EnqueueLowerFloor_L2
 DBG  
#srcline 53 ;    IF queueLowerFloors[index] = queueDefaultValue THEN
 LEA  queueLowerFloors
 LDX  index
#debug int index
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug int queueLowerFloors[index]
 EXTW 
 LD   queueDefaultValue
#debug int queueDefaultValue
 EXTW 
 EQ
 JMC  EnqueueLowerFloor_L3
#srcline 54 ;      queueLowerFloors[index] := floorToEnqueue;
 LDX  floorToEnqueue
#debug int floorToEnqueue
 EXTW 
 LEA  queueLowerFloors
 LDX  index
#debug int index
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRIW 
#debug_left int queueLowerFloors[index]
#srcline 55 ;      EXIT;
 JMP  EnqueueLowerFloor_L2
#srcline 56 ;    END_IF;
EnqueueLowerFloor_L3:
#srcline 57 ;  END_FOR;
 LDX  index
 LD   1
 ADD  
 EXTW 
 WRX  index
 JMP  EnqueueLowerFloor_L1
EnqueueLowerFloor_L2:
 NOP  -1
#srcline 58 ;END_FUNCTION
 PRV  
 LDX  __fc__EnqueueLowerFloor
 ULNK
RET
E     61
#endpou 

#pou EmptyUpperAndLowerQueue
#srcline 60 ;FUNCTION EmptyUpperAndLowerQueue : BOOL

#struct EmptyUpperAndLowerQueue__temp__
  int P0__st__
P     61
EmptyUpperAndLowerQueue_L0:
 LINK __SizeOf(EmptyUpperAndLowerQueue__temp__)
 NXT
; Initialize - variables
 LD   0
 WRX  __fc__EmptyUpperAndLowerQueue
 WRX  index
; End initialize - variables
; Initialize - dynamic variables
; End initialize - dynamic variables
#srcline 64 ;  FOR index := 0 TO queueSize - 1 DO
 LD   int 0
 WRX  index
 LD   queueSize
#debug int queueSize
 EXTW 
 LD   int 1
 SUB
 EXTW
 WRY  P0__st__
EmptyUpperAndLowerQueue_L1:
 LDX  index
 EXTW 
 LDY  P0__st__
 EXTW 
 GTS  
 JMD  EmptyUpperAndLowerQueue_L2
 DBG  
#srcline 65 ;    queueUpperFloors[index] := queueDefaultValue;
 LD   queueDefaultValue
#debug int queueDefaultValue
 EXTW 
 LEA  queueUpperFloors
 LDX  index
#debug int index
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRIW 
#debug_left int queueUpperFloors[index]
#srcline 66 ;    queueLowerFloors[index] := queueDefaultValue;
 LD   queueDefaultValue
#debug int queueDefaultValue
 EXTW 
 LEA  queueLowerFloors
 LDX  index
#debug int index
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRIW 
#debug_left int queueLowerFloors[index]
#srcline 67 ;  END_FOR;
 LDX  index
 LD   1
 ADD  
 EXTW 
 WRX  index
 JMP  EmptyUpperAndLowerQueue_L1
EmptyUpperAndLowerQueue_L2:
 NOP  -1
#srcline 68 ;END_FUNCTION
 PRV  
 LDX  __fc__EmptyUpperAndLowerQueue
 ULNK
RET
E     61
#endpou 

#pou ShiftQueueLeft
#srcline 70 ;FUNCTION ShiftQueueLeft : BOOL

#struct ShiftQueueLeft__temp__
  int P0__st__
P     61
ShiftQueueLeft_L0:
 LINK __SizeOf(ShiftQueueLeft__temp__)
 NXT
; Initialize - variables
 LD   0
 WRX  __fc__ShiftQueueLeft
 WRX  index
 WRX  nextIndex
 WRX  temp
; End initialize - variables
; Initialize - dynamic variables
; End initialize - dynamic variables
#srcline 76 ;  FOR index := 0 TO queueSize - 2 DO // - 2 because not for last element
 LD   int 0
 WRX  index
 LD   queueSize
#debug int queueSize
 EXTW 
 LD   int 2
 SUB
 EXTW
 WRY  P0__st__
ShiftQueueLeft_L1:
 LDX  index
 EXTW 
 LDY  P0__st__
 EXTW 
 GTS  
 JMD  ShiftQueueLeft_L2
 DBG  
#srcline 77 ;    nextIndex := index + 1;
 LDX  index
#debug int index
 EXTW 
 LD   int 1
 ADD
 EXTW
 WRX  nextIndex
#debug_left int nextIndex
#srcline 78 ;    temp := queue[index];
 LEA  queue
 LDX  index
#debug int index
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug int queue[index]
 EXTW 
 WRX  temp
#debug_left int temp
#srcline 79 ;    queue[index] := queue[nextIndex];
 LEA  queue
 LDX  nextIndex
#debug int nextIndex
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug int queue[nextIndex]
 EXTW 
 LEA  queue
 LDX  index
#debug int index
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRIW 
#debug_left int queue[index]
#srcline 80 ;    queue[nextIndex] := temp;
 LDX  temp
#debug int temp
 EXTW 
 LEA  queue
 LDX  nextIndex
#debug int nextIndex
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRIW 
#debug_left int queue[nextIndex]
#srcline 81 ;  END_FOR;
 LDX  index
 LD   1
 ADD  
 EXTW 
 WRX  index
 JMP  ShiftQueueLeft_L1
ShiftQueueLeft_L2:
 NOP  -1
#srcline 82 ;END_FUNCTION
 PRV  
 LDX  __fc__ShiftQueueLeft
 ULNK
RET
E     61
#endpou 

#pou IsAnyDoorOpened
#srcline 85 ;FUNCTION IsAnyDoorOpened : BOOL

#struct IsAnyDoorOpened__temp__
  int P0__st__
P     61
IsAnyDoorOpened_L0:
 LINK __SizeOf(IsAnyDoorOpened__temp__)
 NXT
; Initialize - variables
 LD   0
 WRX  __fc__IsAnyDoorOpened
 WRX  index
; End initialize - variables
; Initialize - dynamic variables
; End initialize - dynamic variables
#srcline 90 ;  IsAnyDoorOpened := FALSE;
 LD   bool 0       ; false
 WRX  __fc__IsAnyDoorOpened
#debug_left bool IsAnyDoorOpened
#srcline 91 ;  FOR index := 0 TO highestFloor - 1 DO
 LD   int 0
 WRX  index
 LD   highestFloor
#debug int highestFloor
 EXTW 
 LD   int 1
 SUB
 EXTW
 WRY  P0__st__
IsAnyDoorOpened_L1:
 LDX  index
 EXTW 
 LDY  P0__st__
 EXTW 
 GTS  
 JMD  IsAnyDoorOpened_L2
 DBG  
#srcline 92 ;    IF elevatorDoorsOpened[index] THEN
 LEA  elevatorDoorsOpened
 LDX  index
#debug int index
 EXTW 
 RCHK 4   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool elevatorDoorsOpened[index]
 JMC  IsAnyDoorOpened_L3
#srcline 93 ;      IsAnyDoorOpened := TRUE;
 LD   bool -1       ; true
 WRX  __fc__IsAnyDoorOpened
#debug_left bool IsAnyDoorOpened
#srcline 94 ;    ELSE
 JMP  IsAnyDoorOpened_L4
IsAnyDoorOpened_L3:
#srcline 95 ;      EXIT;
 JMP  IsAnyDoorOpened_L2
#srcline 96 ;    END_IF;
IsAnyDoorOpened_L4:
#srcline 97 ;  END_FOR;
 LDX  index
 LD   1
 ADD  
 EXTW 
 WRX  index
 JMP  IsAnyDoorOpened_L1
IsAnyDoorOpened_L2:
 NOP  -1
#srcline 98 ;END_FUNCTION
 PRV  
 LDX  __fc__IsAnyDoorOpened
 ULNK
RET
E     61
#endpou 

#pou DequeueFloor
#srcline 100 ;FUNCTION DequeueFloor : INT
P     61
DequeueFloor_L0:
 LINK 0
 NXT
; Initialize - variables
 LD   0
 WRX  __fc__DequeueFloor
 WRX  dequeuedFloor
; End initialize - variables
#srcline 103 ;  END_VAR;
#srcline 105 ;  dequeuedFloor := queue[0];
 LD   queue[0]
#debug int queue[0]
 EXTW 
 WRX  dequeuedFloor
#debug_left int dequeuedFloor
#srcline 106 ;  queue[0] := queueDefaultValue;
 LD   queueDefaultValue
#debug int queueDefaultValue
 EXTW 
 WR   queue[0]
#debug_left int queue[0]
#srcline 107 ;  ShiftQueueLeft();
 LEA  __Instance__ShiftQueueLeft
 CAL  ShiftQueueLeft_L0
#srcline 108 ;  DequeueFloor := dequeuedFloor;
 LDX  dequeuedFloor
#debug int dequeuedFloor
 EXTW 
 WRX  __fc__DequeueFloor
#debug_left int DequeueFloor
#srcline 109 ;END_FUNCTION
 PRV  
 LDX  __fc__DequeueFloor
 EXTW 
 ULNK
RET
E     61
#endpou 

#pou IsFloorAlreadyEnqueued
#srcline 111 ;FUNCTION IsFloorAlreadyEnqueued : BOOL

#struct IsFloorAlreadyEnqueued__temp__
  int P0__st__
P     61
IsFloorAlreadyEnqueued_L0:
 LINK __SizeOf(IsFloorAlreadyEnqueued__temp__)
 NXT
; Initialize - variables
 LD   0
 WRX  __fc__IsFloorAlreadyEnqueued
 WRX  index
; End initialize - variables
; Initialize - dynamic variables
; End initialize - dynamic variables
#srcline 119 ;  IsFloorAlreadyEnqueued := FALSE;
 LD   bool 0       ; false
 WRX  __fc__IsFloorAlreadyEnqueued
#debug_left bool IsFloorAlreadyEnqueued
#srcline 120 ;  FOR index := 0 TO queueSize - 1 DO
 LD   int 0
 WRX  index
 LD   queueSize
#debug int queueSize
 EXTW 
 LD   int 1
 SUB
 EXTW
 WRY  P0__st__
IsFloorAlreadyEnqueued_L1:
 LDX  index
 EXTW 
 LDY  P0__st__
 EXTW 
 GTS  
 JMD  IsFloorAlreadyEnqueued_L2
 DBG  
#srcline 121 ;    IF queue[index] = floor THEN
 LEA  queue
 LDX  index
#debug int index
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug int queue[index]
 EXTW 
 LDX  floor
#debug int floor
 EXTW 
 EQ
 JMC  IsFloorAlreadyEnqueued_L3
#srcline 122 ;      IsFloorAlreadyEnqueued := TRUE;
 LD   bool -1       ; true
 WRX  __fc__IsFloorAlreadyEnqueued
#debug_left bool IsFloorAlreadyEnqueued
#srcline 123 ;      EXIT;
 JMP  IsFloorAlreadyEnqueued_L2
#srcline 124 ;    END_IF;
IsFloorAlreadyEnqueued_L3:
#srcline 125 ;  END_FOR; 
 LDX  index
 LD   1
 ADD  
 EXTW 
 WRX  index
 JMP  IsFloorAlreadyEnqueued_L1
IsFloorAlreadyEnqueued_L2:
 NOP  -1
#srcline 126 ;END_FUNCTION
 PRV  
 LDX  __fc__IsFloorAlreadyEnqueued
 ULNK
RET
E     61
#endpou 

#pou IsQueueEmpty
#srcline 128 ;FUNCTION IsQueueEmpty : BOOL

#struct IsQueueEmpty__temp__
  int P0__st__
P     61
IsQueueEmpty_L0:
 LINK __SizeOf(IsQueueEmpty__temp__)
 NXT
; Initialize - variables
 LD   0
 WRX  __fc__IsQueueEmpty
 WRX  index
 LD   bool -1   ; true
 WRX  empty
; End initialize - variables
; Initialize - dynamic variables
; End initialize - dynamic variables
#srcline 133 ;  FOR index := 0 TO queueSize - 1 DO
 LD   int 0
 WRX  index
 LD   queueSize
#debug int queueSize
 EXTW 
 LD   int 1
 SUB
 EXTW
 WRY  P0__st__
IsQueueEmpty_L1:
 LDX  index
 EXTW 
 LDY  P0__st__
 EXTW 
 GTS  
 JMD  IsQueueEmpty_L2
 DBG  
#srcline 134 ;    IF NOT queue[index] = queueDefaultValue THEN
 LEA  queue
 LDX  index
#debug int index
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug int queue[index]
 EXTW 
 LD   queueDefaultValue
#debug int queueDefaultValue
 EXTW 
 EQ
 NEG
 JMC  IsQueueEmpty_L3
#srcline 135 ;      empty := FALSE;
 LD   bool 0       ; false
 WRX  empty
#debug_left bool empty
#srcline 136 ;      index := 1000;
 LD   int 1000
 WRX  index
#debug_left int index
#srcline 137 ;    END_IF; 
IsQueueEmpty_L3:
#srcline 138 ;  END_FOR;
 LDX  index
 LD   1
 ADD  
 EXTW 
 WRX  index
 JMP  IsQueueEmpty_L1
IsQueueEmpty_L2:
 NOP  -1
#srcline 139 ;  IsQueueEmpty := empty;
 LDX  empty
#debug bool empty
 WRX  __fc__IsQueueEmpty
#debug_left bool IsQueueEmpty
#srcline 140 ;END_FUNCTION
 PRV  
 LDX  __fc__IsQueueEmpty
 ULNK
RET
E     61
#endpou 

#pou BubbleSortQueueLower
#srcline 142 ;FUNCTION BubbleSortQueueLower : BOOL

#struct BubbleSortQueueLower__temp__
  int P0__st__,
  int P1__st__
P     61
BubbleSortQueueLower_L0:
 LINK __SizeOf(BubbleSortQueueLower__temp__)
 NXT
; Initialize - variables
 LD   0
 WRX  __fc__BubbleSortQueueLower
 WRX  i
 WRX  j
 WRX  itemLeft
 WRX  itemRight
 WRX  temp
; End initialize - variables
; Initialize - dynamic variables
; End initialize - dynamic variables
#srcline 150 ;  FOR i := 0 TO queueSize - 2 DO
 LD   int 0
 WRX  i
 LD   queueSize
#debug int queueSize
 EXTW 
 LD   int 2
 SUB
 EXTW
 WRY  P0__st__
BubbleSortQueueLower_L1:
 LDX  i
 EXTW 
 LDY  P0__st__
 EXTW 
 GTS  
 JMD  BubbleSortQueueLower_L2
 DBG  
#srcline 151 ;    FOR j := 0 TO queueSize - 2 DO
 LD   int 0
 WRX  j
 LD   queueSize
#debug int queueSize
 EXTW 
 LD   int 2
 SUB
 EXTW
 WRY  P1__st__
BubbleSortQueueLower_L3:
 LDX  j
 EXTW 
 LDY  P1__st__
 EXTW 
 GTS  
 JMD  BubbleSortQueueLower_L4
 DBG  
#srcline 152 ;      itemLeft := queueLowerFloors[j];
 LEA  queueLowerFloors
 LDX  j
#debug int j
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug int queueLowerFloors[j]
 EXTW 
 WRX  itemLeft
#debug_left int itemLeft
#srcline 153 ;      itemRight := queueLowerFloors[j + 1];
 LEA  queueLowerFloors
 LDX  j
#debug int j
 EXTW 
 LD   int 1
 ADD
 EXTW
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug int queueLowerFloors[j+1]
 EXTW 
 WRX  itemRight
#debug_left int itemRight
#srcline 154 ;      IF itemLeft < itemRight THEN
 LDX  itemLeft
#debug int itemLeft
 EXTW 
 LDX  itemRight
#debug int itemRight
 EXTW 
 LTS
 JMC  BubbleSortQueueLower_L5
#srcline 155 ;        temp := queueLowerFloors[j];
 LEA  queueLowerFloors
 LDX  j
#debug int j
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug int queueLowerFloors[j]
 EXTW 
 WRX  temp
#debug_left int temp
#srcline 156 ;        queueLowerFloors[j] := queueLowerFloors[j + 1];
 LEA  queueLowerFloors
 LDX  j
#debug int j
 EXTW 
 LD   int 1
 ADD
 EXTW
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug int queueLowerFloors[j+1]
 EXTW 
 LEA  queueLowerFloors
 LDX  j
#debug int j
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRIW 
#debug_left int queueLowerFloors[j]
#srcline 157 ;        queueLowerFloors[j + 1] := temp;
 LDX  temp
#debug int temp
 EXTW 
 LEA  queueLowerFloors
 LDX  j
#debug int j
 EXTW 
 LD   int 1
 ADD
 EXTW
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRIW 
#debug_left int queueLowerFloors[j+1]
#srcline 158 ;      END_IF;
BubbleSortQueueLower_L5:
#srcline 159 ;    END_FOR;
 LDX  j
 LD   1
 ADD  
 EXTW 
 WRX  j
 JMP  BubbleSortQueueLower_L3
BubbleSortQueueLower_L4:
 NOP  -1
#srcline 160 ;  END_FOR;
 LDX  i
 LD   1
 ADD  
 EXTW 
 WRX  i
 JMP  BubbleSortQueueLower_L1
BubbleSortQueueLower_L2:
 NOP  -1
#srcline 161 ;END_FUNCTION
 PRV  
 LDX  __fc__BubbleSortQueueLower
 ULNK
RET
E     61
#endpou 

#pou BubbleSortQueueUpper
#srcline 163 ;FUNCTION BubbleSortQueueUpper : BOOL

#struct BubbleSortQueueUpper__temp__
  int P0__st__,
  int P1__st__
P     61
BubbleSortQueueUpper_L0:
 LINK __SizeOf(BubbleSortQueueUpper__temp__)
 NXT
; Initialize - variables
 LD   0
 WRX  __fc__BubbleSortQueueUpper
 WRX  i
 WRX  j
 WRX  itemLeft
 WRX  itemRight
 WRX  temp
; End initialize - variables
; Initialize - dynamic variables
; End initialize - dynamic variables
#srcline 171 ;  FOR i := 0 TO queueSize - 2 DO
 LD   int 0
 WRX  i
 LD   queueSize
#debug int queueSize
 EXTW 
 LD   int 2
 SUB
 EXTW
 WRY  P0__st__
BubbleSortQueueUpper_L1:
 LDX  i
 EXTW 
 LDY  P0__st__
 EXTW 
 GTS  
 JMD  BubbleSortQueueUpper_L2
 DBG  
#srcline 172 ;    FOR j := 0 TO queueSize - 2 DO
 LD   int 0
 WRX  j
 LD   queueSize
#debug int queueSize
 EXTW 
 LD   int 2
 SUB
 EXTW
 WRY  P1__st__
BubbleSortQueueUpper_L3:
 LDX  j
 EXTW 
 LDY  P1__st__
 EXTW 
 GTS  
 JMD  BubbleSortQueueUpper_L4
 DBG  
#srcline 173 ;      itemLeft := queueUpperFloors[j];
 LEA  queueUpperFloors
 LDX  j
#debug int j
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug int queueUpperFloors[j]
 EXTW 
 WRX  itemLeft
#debug_left int itemLeft
#srcline 174 ;      itemRight := queueUpperFloors[j + 1];
 LEA  queueUpperFloors
 LDX  j
#debug int j
 EXTW 
 LD   int 1
 ADD
 EXTW
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug int queueUpperFloors[j+1]
 EXTW 
 WRX  itemRight
#debug_left int itemRight
#srcline 175 ;      IF itemLeft < itemRight THEN
 LDX  itemLeft
#debug int itemLeft
 EXTW 
 LDX  itemRight
#debug int itemRight
 EXTW 
 LTS
 JMC  BubbleSortQueueUpper_L5
#srcline 176 ;        temp := queueUpperFloors[j];
 LEA  queueUpperFloors
 LDX  j
#debug int j
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug int queueUpperFloors[j]
 EXTW 
 WRX  temp
#debug_left int temp
#srcline 177 ;        queueUpperFloors[j] := queueUpperFloors[j + 1];
 LEA  queueUpperFloors
 LDX  j
#debug int j
 EXTW 
 LD   int 1
 ADD
 EXTW
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug int queueUpperFloors[j+1]
 EXTW 
 LEA  queueUpperFloors
 LDX  j
#debug int j
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRIW 
#debug_left int queueUpperFloors[j]
#srcline 178 ;        queueUpperFloors[j + 1] := temp;
 LDX  temp
#debug int temp
 EXTW 
 LEA  queueUpperFloors
 LDX  j
#debug int j
 EXTW 
 LD   int 1
 ADD
 EXTW
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRIW 
#debug_left int queueUpperFloors[j+1]
#srcline 179 ;      END_IF;
BubbleSortQueueUpper_L5:
#srcline 180 ;    END_FOR;
 LDX  j
 LD   1
 ADD  
 EXTW 
 WRX  j
 JMP  BubbleSortQueueUpper_L3
BubbleSortQueueUpper_L4:
 NOP  -1
#srcline 181 ;  END_FOR;
 LDX  i
 LD   1
 ADD  
 EXTW 
 WRX  i
 JMP  BubbleSortQueueUpper_L1
BubbleSortQueueUpper_L2:
 NOP  -1
#srcline 182 ;END_FUNCTION
 PRV  
 LDX  __fc__BubbleSortQueueUpper
 ULNK
RET
E     61
#endpou 

#pou BubbleSortQueue
#srcline 184 ;FUNCTION BubbleSortQueue : BOOL

#struct BubbleSortQueue__temp__
  int P0__st__,
  int P1__st__
P     61
BubbleSortQueue_L0:
 LINK __SizeOf(BubbleSortQueue__temp__)
 NXT
; Initialize - variables
 LD   0
 WRX  __fc__BubbleSortQueue
 WRX  i
 WRX  j
 WRX  itemLeft
 WRX  itemRight
 WRX  temp
; End initialize - variables
; Initialize - dynamic variables
; End initialize - dynamic variables
#srcline 192 ;  FOR i := 0 TO queueSize - 2 DO
 LD   int 0
 WRX  i
 LD   queueSize
#debug int queueSize
 EXTW 
 LD   int 2
 SUB
 EXTW
 WRY  P0__st__
BubbleSortQueue_L1:
 LDX  i
 EXTW 
 LDY  P0__st__
 EXTW 
 GTS  
 JMD  BubbleSortQueue_L2
 DBG  
#srcline 193 ;    FOR j := 0 TO queueSize - 2 DO
 LD   int 0
 WRX  j
 LD   queueSize
#debug int queueSize
 EXTW 
 LD   int 2
 SUB
 EXTW
 WRY  P1__st__
BubbleSortQueue_L3:
 LDX  j
 EXTW 
 LDY  P1__st__
 EXTW 
 GTS  
 JMD  BubbleSortQueue_L4
 DBG  
#srcline 194 ;      itemLeft := queue[j];
 LEA  queue
 LDX  j
#debug int j
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug int queue[j]
 EXTW 
 WRX  itemLeft
#debug_left int itemLeft
#srcline 195 ;      itemRight := queue[j + 1];
 LEA  queue
 LDX  j
#debug int j
 EXTW 
 LD   int 1
 ADD
 EXTW
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug int queue[j+1]
 EXTW 
 WRX  itemRight
#debug_left int itemRight
#srcline 196 ;      IF itemLeft < itemRight THEN
 LDX  itemLeft
#debug int itemLeft
 EXTW 
 LDX  itemRight
#debug int itemRight
 EXTW 
 LTS
 JMC  BubbleSortQueue_L5
#srcline 197 ;        temp := queue[j];
 LEA  queue
 LDX  j
#debug int j
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug int queue[j]
 EXTW 
 WRX  temp
#debug_left int temp
#srcline 198 ;        queue[j] := queue[j + 1];
 LEA  queue
 LDX  j
#debug int j
 EXTW 
 LD   int 1
 ADD
 EXTW
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug int queue[j+1]
 EXTW 
 LEA  queue
 LDX  j
#debug int j
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRIW 
#debug_left int queue[j]
#srcline 199 ;        queue[j + 1] := temp;
 LDX  temp
#debug int temp
 EXTW 
 LEA  queue
 LDX  j
#debug int j
 EXTW 
 LD   int 1
 ADD
 EXTW
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRIW 
#debug_left int queue[j+1]
#srcline 200 ;      END_IF;
BubbleSortQueue_L5:
#srcline 201 ;    END_FOR;
 LDX  j
 LD   1
 ADD  
 EXTW 
 WRX  j
 JMP  BubbleSortQueue_L3
BubbleSortQueue_L4:
 NOP  -1
#srcline 202 ;  END_FOR;
 LDX  i
 LD   1
 ADD  
 EXTW 
 WRX  i
 JMP  BubbleSortQueue_L1
BubbleSortQueue_L2:
 NOP  -1
#srcline 203 ;END_FUNCTION
 PRV  
 LDX  __fc__BubbleSortQueue
 ULNK
RET
E     61
#endpou 

#pou ElevatorSortQueue
#srcline 205 ;FUNCTION ElevatorSortQueue : BOOL

#struct ElevatorSortQueue__temp__
  int P0__st__,
  int P1__st__,
  int P2__st__
P     61
ElevatorSortQueue_L0:
 LINK __SizeOf(ElevatorSortQueue__temp__)
 NXT
; Initialize - variables
 LD   0
 WRX  __fc__ElevatorSortQueue
 WRX  index
 WRX  item
 WRX  index2
 LD   int 0
 WRX  changes
; End initialize - variables
; Initialize - dynamic variables
; End initialize - dynamic variables
#srcline 212 ;  FOR index := 0 TO queueSize - 1 DO
 LD   int 0
 WRX  index
 LD   queueSize
#debug int queueSize
 EXTW 
 LD   int 1
 SUB
 EXTW
 WRY  P0__st__
ElevatorSortQueue_L1:
 LDX  index
 EXTW 
 LDY  P0__st__
 EXTW 
 GTS  
 JMD  ElevatorSortQueue_L2
 DBG  
#srcline 213 ;    item := queue[index];
 LEA  queue
 LDX  index
#debug int index
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug int queue[index]
 EXTW 
 WRX  item
#debug_left int item
#srcline 214 ;    IF item > elevatorFloorStart THEN
 LDX  item
#debug int item
 EXTW 
 LD   elevatorFloorStart
#debug int elevatorFloorStart
 EXTW 
 GTS
 JMC  ElevatorSortQueue_L3
#srcline 215 ;      EnqueueUpperFloor(item);
 NXT
 LDX  item
#debug int item
 EXTW 
 WR   __Instance__EnqueueUpperFloor~floorToEnqueue
#debug_left int __Instance__EnqueueUpperFloor~floorToEnqueue
 PRV
 LEA  __Instance__EnqueueUpperFloor
 CAL  EnqueueUpperFloor_L0
#srcline 216 ;    ELSIF item < elevatorFloorStart THEN
 JMP  ElevatorSortQueue_L4
ElevatorSortQueue_L3:
 LDX  item
#debug int item
 EXTW 
 LD   elevatorFloorStart
#debug int elevatorFloorStart
 EXTW 
 LTS
 JMC  ElevatorSortQueue_L5
#srcline 217 ;      EnqueueLowerFloor(item);
 NXT
 LDX  item
#debug int item
 EXTW 
 WR   __Instance__EnqueueLowerFloor~floorToEnqueue
#debug_left int __Instance__EnqueueLowerFloor~floorToEnqueue
 PRV
 LEA  __Instance__EnqueueLowerFloor
 CAL  EnqueueLowerFloor_L0
#srcline 218 ;    END_IF;
 JMP  ElevatorSortQueue_L4
ElevatorSortQueue_L5:
ElevatorSortQueue_L4:
#srcline 219 ;  END_FOR;
 LDX  index
 LD   1
 ADD  
 EXTW 
 WRX  index
 JMP  ElevatorSortQueue_L1
ElevatorSortQueue_L2:
 NOP  -1
#srcline 221 ;  IF sortLowerFloors THEN BubbleSortQueueLower(); END_IF;
 LD   sortLowerFloors
#debug bool sortLowerFloors
 JMC  ElevatorSortQueue_L6
 LEA  __Instance__BubbleSortQueueLower
 CAL  BubbleSortQueueLower_L0
ElevatorSortQueue_L6:
#srcline 222 ;  IF sortUpperFloors THEN BubbleSortQueueUpper(); END_IF;
 LD   sortUpperFloors
#debug bool sortUpperFloors
 JMC  ElevatorSortQueue_L8
 LEA  __Instance__BubbleSortQueueUpper
 CAL  BubbleSortQueueUpper_L0
ElevatorSortQueue_L8:
#srcline 224 ;  FOR index := 0 TO queueSize - 1 DO
 LD   int 0
 WRX  index
 LD   queueSize
#debug int queueSize
 EXTW 
 LD   int 1
 SUB
 EXTW
 WRY  P1__st__
ElevatorSortQueue_L10:
 LDX  index
 EXTW 
 LDY  P1__st__
 EXTW 
 GTS  
 JMD  ElevatorSortQueue_L11
 DBG  
#srcline 225 ;    item := queueLowerFloors[index];
 LEA  queueLowerFloors
 LDX  index
#debug int index
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug int queueLowerFloors[index]
 EXTW 
 WRX  item
#debug_left int item
#srcline 226 ;    IF NOT item = queueDefaultValue THEN
 LDX  item
#debug int item
 EXTW 
 LD   queueDefaultValue
#debug int queueDefaultValue
 EXTW 
 EQ
 NEG
 JMC  ElevatorSortQueue_L12
#srcline 227 ;      queue[index] := item;
 LDX  item
#debug int item
 EXTW 
 LEA  queue
 LDX  index
#debug int index
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRIW 
#debug_left int queue[index]
#srcline 228 ;      changes := changes + 1;
 LDX  changes
#debug int changes
 EXTW 
 LD   int 1
 ADD
 EXTW
 WRX  changes
#debug_left int changes
#srcline 229 ;    ELSE      
 JMP  ElevatorSortQueue_L13
ElevatorSortQueue_L12:
#srcline 230 ;      EXIT;
 JMP  ElevatorSortQueue_L11
#srcline 231 ;    END_IF;
ElevatorSortQueue_L13:
#srcline 232 ;  END_FOR;
 LDX  index
 LD   1
 ADD  
 EXTW 
 WRX  index
 JMP  ElevatorSortQueue_L10
ElevatorSortQueue_L11:
 NOP  -1
#srcline 234 ;  FOR index2 := 0 TO queueSize - 1 DO
 LD   int 0
 WRX  index2
 LD   queueSize
#debug int queueSize
 EXTW 
 LD   int 1
 SUB
 EXTW
 WRY  P2__st__
ElevatorSortQueue_L14:
 LDX  index2
 EXTW 
 LDY  P2__st__
 EXTW 
 GTS  
 JMD  ElevatorSortQueue_L15
 DBG  
#srcline 235 ;    item := queueUpperFloors[index2];
 LEA  queueUpperFloors
 LDX  index2
#debug int index2
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug int queueUpperFloors[index2]
 EXTW 
 WRX  item
#debug_left int item
#srcline 236 ;    IF NOT item = queueDefaultValue THEN
 LDX  item
#debug int item
 EXTW 
 LD   queueDefaultValue
#debug int queueDefaultValue
 EXTW 
 EQ
 NEG
 JMC  ElevatorSortQueue_L16
#srcline 237 ;      queue[index2 + changes] := item;
 LDX  item
#debug int item
 EXTW 
 LEA  queue
 LDX  index2
#debug int index2
 EXTW 
 LDX  changes
#debug int changes
 EXTW 
 ADD
 EXTW
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRIW 
#debug_left int queue[index2+changes]
#srcline 238 ;    ELSE
 JMP  ElevatorSortQueue_L17
ElevatorSortQueue_L16:
#srcline 239 ;      EXIT;
 JMP  ElevatorSortQueue_L15
#srcline 240 ;    END_IF;
ElevatorSortQueue_L17:
#srcline 241 ;  END_FOR;
 LDX  index2
 LD   1
 ADD  
 EXTW 
 WRX  index2
 JMP  ElevatorSortQueue_L14
ElevatorSortQueue_L15:
 NOP  -1
#srcline 242 ;  EmptyUpperAndLowerQueue();
 LEA  __Instance__EmptyUpperAndLowerQueue
 CAL  EmptyUpperAndLowerQueue_L0
#srcline 243 ;END_FUNCTION
 PRV  
 LDX  __fc__ElevatorSortQueue
 ULNK
RET
E     61
#endpou 

#pou CloseAllDoors
#srcline 247 ;FUNCTION CloseAllDoors : BOOL

#struct CloseAllDoors__temp__
  int P0__st__
P     61
CloseAllDoors_L0:
 LINK __SizeOf(CloseAllDoors__temp__)
 NXT
; Initialize - variables
 LD   0
 WRX  __fc__CloseAllDoors
 WRX  index
; End initialize - variables
; Initialize - dynamic variables
; End initialize - dynamic variables
#srcline 251 ;  FOR index := 0 TO highestFloor - 1 DO
 LD   int 0
 WRX  index
 LD   highestFloor
#debug int highestFloor
 EXTW 
 LD   int 1
 SUB
 EXTW
 WRY  P0__st__
CloseAllDoors_L1:
 LDX  index
 EXTW 
 LDY  P0__st__
 EXTW 
 GTS  
 JMD  CloseAllDoors_L2
 DBG  
#srcline 252 ;    elevatorDoorsOpened[index] := FALSE;
 LD   bool 0       ; false
 LEA  elevatorDoorsOpened
 LDX  index
#debug int index
 EXTW 
 RCHK 4   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool elevatorDoorsOpened[index]
#srcline 253 ;  END_FOR;
 LDX  index
 LD   1
 ADD  
 EXTW 
 WRX  index
 JMP  CloseAllDoors_L1
CloseAllDoors_L2:
 NOP  -1
#srcline 254 ;END_FUNCTION
 PRV  
 LDX  __fc__CloseAllDoors
 ULNK
RET
E     61
#endpou 

#pou CloseAllDoorsExceptForArg
#srcline 256 ;FUNCTION CloseAllDoorsExceptForArg : BOOL

#struct CloseAllDoorsExceptForArg__temp__
  int P0__st__
P     61
CloseAllDoorsExceptForArg_L0:
 LINK __SizeOf(CloseAllDoorsExceptForArg__temp__)
 NXT
; Initialize - variables
 LD   0
 WRX  __fc__CloseAllDoorsExceptForArg
 WRX  index
; End initialize - variables
; Initialize - dynamic variables
; End initialize - dynamic variables
#srcline 263 ;  FOR index := 0 TO highestFloor - 1 DO
 LD   int 0
 WRX  index
 LD   highestFloor
#debug int highestFloor
 EXTW 
 LD   int 1
 SUB
 EXTW
 WRY  P0__st__
CloseAllDoorsExceptForArg_L1:
 LDX  index
 EXTW 
 LDY  P0__st__
 EXTW 
 GTS  
 JMD  CloseAllDoorsExceptForArg_L2
 DBG  
#srcline 264 ;    IF index = floorDoorToOpen THEN
 LDX  index
#debug int index
 EXTW 
 LDX  floorDoorToOpen
#debug int floorDoorToOpen
 EXTW 
 EQ
 JMC  CloseAllDoorsExceptForArg_L3
#srcline 265 ;      elevatorDoorsOpened[index] := TRUE;
 LD   bool -1       ; true
 LEA  elevatorDoorsOpened
 LDX  index
#debug int index
 EXTW 
 RCHK 4   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool elevatorDoorsOpened[index]
#srcline 266 ;    ELSE
 JMP  CloseAllDoorsExceptForArg_L4
CloseAllDoorsExceptForArg_L3:
#srcline 267 ;      elevatorDoorsOpened[index] := FALSE;
 LD   bool 0       ; false
 LEA  elevatorDoorsOpened
 LDX  index
#debug int index
 EXTW 
 RCHK 4   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool elevatorDoorsOpened[index]
#srcline 268 ;    END_IF;
CloseAllDoorsExceptForArg_L4:
#srcline 269 ;  END_FOR;
 LDX  index
 LD   1
 ADD  
 EXTW 
 WRX  index
 JMP  CloseAllDoorsExceptForArg_L1
CloseAllDoorsExceptForArg_L2:
 NOP  -1
#srcline 270 ;END_FUNCTION
 PRV  
 LDX  __fc__CloseAllDoorsExceptForArg
 ULNK
RET
E     61
#endpou 

#pou HandleDoors
#srcline 272 ;FUNCTION HandleDoors : BOOL
P     61
HandleDoors_L0:
 LINK 0
 NXT
; Initialize - variables
 LD   0
 WRX  __fc__HandleDoors
; End initialize - variables
#srcline 273 ;  IF forceOpenCurrentElevatorFloorDoor OR stopSignActivated THEN
 LD   forceOpenCurrentElevatorFloorDoor
#debug bool forceOpenCurrentElevatorFloorDoor
 LD   stopSignActivated
#debug bool stopSignActivated
 OR  
 JMC  HandleDoors_L1
#srcline 274 ;    elevatorDoorsOpened[elevatorFloor] := TRUE;
 LD   bool -1       ; true
 LEA  elevatorDoorsOpened
 LD   elevatorFloor
#debug int elevatorFloor
 EXTW 
 RCHK 4   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool elevatorDoorsOpened[elevatorFloor]
#srcline 275 ;  ELSIF elevatorDirection = 0 THEN
 JMP  HandleDoors_L2
HandleDoors_L1:
 LD   elevatorDirection
#debug int elevatorDirection
 EXTW 
 LD   int 0
 EQ
 JMC  HandleDoors_L3
#srcline 276 ;    // open doors of the floor the elevator is at
#srcline 277 ;    CloseAllDoorsExceptForArg(elevatorFloor);
 NXT
 LD   elevatorFloor
#debug int elevatorFloor
 EXTW 
 WR   __Instance__CloseAllDoorsExceptForArg~floorDoorToOpen
#debug_left int __Instance__CloseAllDoorsExceptForArg~floorDoorToOpen
 PRV
 LEA  __Instance__CloseAllDoorsExceptForArg
 CAL  CloseAllDoorsExceptForArg_L0
#srcline 278 ;  ELSE
 JMP  HandleDoors_L2
HandleDoors_L3:
#srcline 279 ;    CloseAllDoors();
 LEA  __Instance__CloseAllDoors
 CAL  CloseAllDoors_L0
#srcline 280 ;  END_IF;
HandleDoors_L2:
#srcline 281 ;END_FUNCTION
 PRV  
 LDX  __fc__HandleDoors
 ULNK
RET
E     61
#endpou 

#pou ResetAllButtons
#srcline 283 ;FUNCTION ResetAllButtons : BOOL

#struct ResetAllButtons__temp__
  int P0__st__
P     61
ResetAllButtons_L0:
 LINK __SizeOf(ResetAllButtons__temp__)
 NXT
; Initialize - variables
 LD   0
 WRX  __fc__ResetAllButtons
 WRX  index
; End initialize - variables
; Initialize - dynamic variables
; End initialize - dynamic variables
#srcline 287 ;  FOR index := 0 TO highestFloor - 1 DO
 LD   int 0
 WRX  index
 LD   highestFloor
#debug int highestFloor
 EXTW 
 LD   int 1
 SUB
 EXTW
 WRY  P0__st__
ResetAllButtons_L1:
 LDX  index
 EXTW 
 LDY  P0__st__
 EXTW 
 GTS  
 JMD  ResetAllButtons_L2
 DBG  
#srcline 288 ;    elevatorButtonsPressed[index] := FALSE;
 LD   bool 0       ; false
 LEA  elevatorButtonsPressed
 LDX  index
#debug int index
 EXTW 
 RCHK 4   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool elevatorButtonsPressed[index]
#srcline 289 ;  END_FOR;
 LDX  index
 LD   1
 ADD  
 EXTW 
 WRX  index
 JMP  ResetAllButtons_L1
ResetAllButtons_L2:
 NOP  -1
#srcline 290 ;END_FUNCTION
 PRV  
 LDX  __fc__ResetAllButtons
 ULNK
RET
E     61
#endpou 

#pou HandleFloorSelection
#srcline 292 ;FUNCTION HandleFloorSelection : BOOL

#struct HandleFloorSelection__temp__
  string[82] PS0__st__,
  string[82] PSC__st__
P     61
HandleFloorSelection_L0:
 LINK __SizeOf(HandleFloorSelection__temp__)
 NXT
; Initialize - variables
 LD   0
 WRX  __fc__HandleFloorSelection
; End initialize - variables
#srcline 293 ;  IF NOT elevatorFloor = targetFloor AND NOT IsFloorAlreadyEnqueued(targetFloor) THEN
 LD   elevatorFloor
#debug int elevatorFloor
 EXTW 
 LD   targetFloor
#debug int targetFloor
 EXTW 
 EQ
 NEG
 NXT
 LD   targetFloor
#debug int targetFloor
 EXTW 
 WR   __Instance__IsFloorAlreadyEnqueued~floor
#debug_left int __Instance__IsFloorAlreadyEnqueued~floor
 PRV
 LEA  __Instance__IsFloorAlreadyEnqueued
 CAL  IsFloorAlreadyEnqueued_L0
 NEG
 AND
 JMC  HandleFloorSelection_L1
#srcline 294 ;    EnqueueFloor(targetFloor);
 NXT
 LD   targetFloor
#debug int targetFloor
 EXTW 
 WR   __Instance__EnqueueFloor~floorToEnqueue
#debug_left int __Instance__EnqueueFloor~floorToEnqueue
 PRV
 LEA  __Instance__EnqueueFloor
 CAL  EnqueueFloor_L0
#srcline 295 ;    floorSetAsElevStop[targetFloor] := TRUE;
 LD   bool -1       ; true
 LEA  floorSetAsElevStop
 LD   targetFloor
#debug int targetFloor
 EXTW 
 RCHK 4   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool floorSetAsElevStop[targetFloor]
#srcline 296 ;    pressedButtonsQueueDebug := pressedButtonsQueueDebug + INT_TO_STRING(targetFloor);
 LD   0   ; null string
 WRY  PS0__st__[0]
 LEAY PS0__st__[0]
 LD   80
 DST    ; Level 1
 LEA  pressedButtonsQueueDebug
#debug string pressedButtonsQueueDebug
 SCON 
 LD   0   ; null string
 WRY  PSC__st__[0]
 LEAY PSC__st__[0]
 LD   80
 DST    ; Level 2
 LD   targetFloor
#debug int targetFloor
 EXTW 
 SCNV $0B30;  IEC_INT _TO_ IEC_STRING
 PDST   ; Level 2
 LEAY PSC__st__[0]

 SCON 
 PDST   ; Level 1
 LD   0   ; null string
 LEA  pressedButtonsQueueDebug
 WRI  
 LEA  pressedButtonsQueueDebug
 LD   80
 DST    ; Level 1
 LEAY PS0__st__[0]
 SCON 
#debug_left string pressedButtonsQueueDebug
 PDST   ; Level 1
#srcline 297 ;  ELSE
 JMP  HandleFloorSelection_L2
HandleFloorSelection_L1:
#srcline 298 ;    elevatorDirectionIndicator := 1;
 LD   int 1
 WR   elevatorDirectionIndicator
#debug_left int elevatorDirectionIndicator
#srcline 299 ;  END_IF;
HandleFloorSelection_L2:
#srcline 300 ;  
#srcline 301 ;  ResetAllButtons();
 LEA  __Instance__ResetAllButtons
 CAL  ResetAllButtons_L0
#srcline 302 ;END_FUNCTION
 PRV  
 LDX  __fc__HandleFloorSelection
 ULNK
RET
E     61
#endpou 

#pou IsAnyButtonPressed
#srcline 304 ;FUNCTION IsAnyButtonPressed : BOOL

#struct IsAnyButtonPressed__temp__
  int P0__st__
P     61
IsAnyButtonPressed_L0:
 LINK __SizeOf(IsAnyButtonPressed__temp__)
 NXT
; Initialize - variables
 LD   0
 WRX  __fc__IsAnyButtonPressed
 WRX  index
; End initialize - variables
; Initialize - dynamic variables
; End initialize - dynamic variables
#srcline 307 ;  END_VAR;
#srcline 308 ;  FOR index := 0 TO highestFloor - 1 DO
 LD   int 0
 WRX  index
 LD   highestFloor
#debug int highestFloor
 EXTW 
 LD   int 1
 SUB
 EXTW
 WRY  P0__st__
IsAnyButtonPressed_L1:
 LDX  index
 EXTW 
 LDY  P0__st__
 EXTW 
 GTS  
 JMD  IsAnyButtonPressed_L2
 DBG  
#srcline 309 ;    IF elevatorButtonsPressed[index] THEN
 LEA  elevatorButtonsPressed
 LDX  index
#debug int index
 EXTW 
 RCHK 4   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool elevatorButtonsPressed[index]
 JMC  IsAnyButtonPressed_L3
#srcline 310 ;      anyFloorButtonPressed := TRUE;
 LD   bool -1       ; true
 WR   anyFloorButtonPressed
#debug_left bool anyFloorButtonPressed
#srcline 311 ;      IsAnyButtonPressed := TRUE;
 LD   bool -1       ; true
 WRX  __fc__IsAnyButtonPressed
#debug_left bool IsAnyButtonPressed
#srcline 312 ;    END_IF;
IsAnyButtonPressed_L3:
#srcline 313 ;  END_FOR;
 LDX  index
 LD   1
 ADD  
 EXTW 
 WRX  index
 JMP  IsAnyButtonPressed_L1
IsAnyButtonPressed_L2:
 NOP  -1
#srcline 314 ;END_FUNCTION
 PRV  
 LDX  __fc__IsAnyButtonPressed
 ULNK
RET
E     61
#endpou 

#pou HandleButtons
#srcline 316 ;FUNCTION HandleButtons : BOOL

#struct HandleButtons__temp__
  int P0__st__
P     61
HandleButtons_L0:
 LINK __SizeOf(HandleButtons__temp__)
 NXT
; Initialize - variables
 LD   0
 WRX  __fc__HandleButtons
 WRX  index
; End initialize - variables
; Initialize - dynamic variables
; End initialize - dynamic variables
#srcline 321 ;  IsAnyButtonPressed();
 LEA  __Instance__IsAnyButtonPressed
 CAL  IsAnyButtonPressed_L0
#srcline 323 ;  FOR index := 0 TO highestFloor - 1 DO
 LD   int 0
 WRX  index
 LD   highestFloor
#debug int highestFloor
 EXTW 
 LD   int 1
 SUB
 EXTW
 WRY  P0__st__
HandleButtons_L1:
 LDX  index
 EXTW 
 LDY  P0__st__
 EXTW 
 GTS  
 JMD  HandleButtons_L2
 DBG  
#srcline 324 ;    IF elevatorButtonsPressed[index] THEN
 LEA  elevatorButtonsPressed
 LDX  index
#debug int index
 EXTW 
 RCHK 4   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool elevatorButtonsPressed[index]
 JMC  HandleButtons_L3
#srcline 325 ;      targetFloor := index;
 LDX  index
#debug int index
 EXTW 
 WR   targetFloor
#debug_left int targetFloor
#srcline 326 ;      HandleFloorSelection();
 LEA  __Instance__HandleFloorSelection
 CAL  HandleFloorSelection_L0
#srcline 327 ;    END_IF;
HandleButtons_L3:
#srcline 328 ;  END_FOR;
 LDX  index
 LD   1
 ADD  
 EXTW 
 WRX  index
 JMP  HandleButtons_L1
HandleButtons_L2:
 NOP  -1
#srcline 329 ;END_FUNCTION
 PRV  
 LDX  __fc__HandleButtons
 ULNK
RET
E     61
#endpou 

#pou HandleMovement
#srcline 331 ;FUNCTION HandleMovement : BOOL  
P     61
HandleMovement_L0:
 LINK 0
 NXT
; Initialize - variables
 LD   0
 WRX  __fc__HandleMovement
; End initialize - variables
#srcline 332 ;  IF NOT stopSignActivated THEN
 LD   stopSignActivated
#debug bool stopSignActivated
 NEG
 JMC  HandleMovement_L1
#srcline 333 ;    IF NOT queue[0] = elevatorFloor THEN
 LD   queue[0]
#debug int queue[0]
 EXTW 
 LD   elevatorFloor
#debug int elevatorFloor
 EXTW 
 EQ
 NEG
 JMC  HandleMovement_L3
#srcline 334 ;      IF elevatorDirection = -1 THEN
 LD   elevatorDirection
#debug int elevatorDirection
 EXTW 
 LD   int -1
 EQ
 JMC  HandleMovement_L5
#srcline 335 ;        elevatorFloor := elevatorFloor - 1;
 LD   elevatorFloor
#debug int elevatorFloor
 EXTW 
 LD   int 1
 SUB
 EXTW
 WR   elevatorFloor
#debug_left int elevatorFloor
#srcline 336 ;      ELSIF elevatorDirection = 1 THEN
 JMP  HandleMovement_L6
HandleMovement_L5:
 LD   elevatorDirection
#debug int elevatorDirection
 EXTW 
 LD   int 1
 EQ
 JMC  HandleMovement_L7
#srcline 337 ;        elevatorFloor := elevatorFloor + 1;
 LD   elevatorFloor
#debug int elevatorFloor
 EXTW 
 LD   int 1
 ADD
 EXTW
 WR   elevatorFloor
#debug_left int elevatorFloor
#srcline 338 ;      END_IF;
 JMP  HandleMovement_L6
HandleMovement_L7:
HandleMovement_L6:
#srcline 339 ;      HandleMovement := FALSE;
 LD   bool 0       ; false
 WRX  __fc__HandleMovement
#debug_left bool HandleMovement
#srcline 340 ;    ELSE 
 JMP  HandleMovement_L4
HandleMovement_L3:
#srcline 341 ;      floorSetAsElevStop[elevatorFloor] := FALSE;
 LD   bool 0       ; false
 LEA  floorSetAsElevStop
 LD   elevatorFloor
#debug int elevatorFloor
 EXTW 
 RCHK 4   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool floorSetAsElevStop[elevatorFloor]
#srcline 342 ;      queue[0] := queueDefaultValue;
 LD   queueDefaultValue
#debug int queueDefaultValue
 EXTW 
 WR   queue[0]
#debug_left int queue[0]
#srcline 343 ;      ShiftQueueLeft();
 LEA  __Instance__ShiftQueueLeft
 CAL  ShiftQueueLeft_L0
#srcline 344 ;      elevatorDirection := 0;
 LD   int 0
 WR   elevatorDirection
#debug_left int elevatorDirection
#srcline 345 ;      HandleMovement := TRUE; // floor stop
 LD   bool -1       ; true
 WRX  __fc__HandleMovement
#debug_left bool HandleMovement
#srcline 346 ;    END_IF;
HandleMovement_L4:
#srcline 347 ;  ELSE
 JMP  HandleMovement_L2
HandleMovement_L1:
#srcline 348 ;    // obstacle detected, wait for doors
#srcline 349 ;    HandleMovement := TRUE;
 LD   bool -1       ; true
 WRX  __fc__HandleMovement
#debug_left bool HandleMovement
#srcline 350 ;  END_IF; 
HandleMovement_L2:
#srcline 351 ;END_FUNCTION
 PRV  
 LDX  __fc__HandleMovement
 ULNK
RET
E     61
#endpou 

#pou IsAnyObstaclePresent
#srcline 353 ;FUNCTION IsAnyObstaclePresent : BOOL

#struct IsAnyObstaclePresent__temp__
  int P0__st__
P     61
IsAnyObstaclePresent_L0:
 LINK __SizeOf(IsAnyObstaclePresent__temp__)
 NXT
; Initialize - variables
 LD   0
 WRX  __fc__IsAnyObstaclePresent
 WRX  index
; End initialize - variables
; Initialize - dynamic variables
; End initialize - dynamic variables
#srcline 358 ;  anyObstacleDetected := FALSE;
 LD   bool 0       ; false
 WR   anyObstacleDetected
#debug_left bool anyObstacleDetected
#srcline 359 ;  FOR index := 0 TO highestFloor - 1 DO
 LD   int 0
 WRX  index
 LD   highestFloor
#debug int highestFloor
 EXTW 
 LD   int 1
 SUB
 EXTW
 WRY  P0__st__
IsAnyObstaclePresent_L1:
 LDX  index
 EXTW 
 LDY  P0__st__
 EXTW 
 GTS  
 JMD  IsAnyObstaclePresent_L2
 DBG  
#srcline 360 ;    IF obstaclesBlockingDoors[index] OR obstacleElevator THEN
 LEA  obstaclesBlockingDoors
 LDX  index
#debug int index
 EXTW 
 RCHK 4   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool obstaclesBlockingDoors[index]
 LD   obstacleElevator
#debug bool obstacleElevator
 OR  
 JMC  IsAnyObstaclePresent_L3
#srcline 361 ;      anyObstacleDetected := TRUE;
 LD   bool -1       ; true
 WR   anyObstacleDetected
#debug_left bool anyObstacleDetected
#srcline 362 ;    END_IF;
IsAnyObstaclePresent_L3:
#srcline 363 ;  END_FOR;
 LDX  index
 LD   1
 ADD  
 EXTW 
 WRX  index
 JMP  IsAnyObstaclePresent_L1
IsAnyObstaclePresent_L2:
 NOP  -1
#srcline 364 ;END_FUNCTION
 PRV  
 LDX  __fc__IsAnyObstaclePresent
 ULNK
RET
E     61
#endpou 

#pou HandleStopConditions
#srcline 366 ;FUNCTION HandleStopConditions : BOOL
P     61
HandleStopConditions_L0:
 LINK 0
 NXT
; Initialize - variables
 LD   0
 WRX  __fc__HandleStopConditions
; End initialize - variables
#srcline 367 ;  stopSignActivated := 
#srcline 368 ;    anyObstacleDetected 
#srcline 369 ;    OR elevatorButtonStopPressed
 LD   anyObstacleDetected
#debug bool anyObstacleDetected
#srcline 370 ;    OR elevatorWeight > elevatorMaximumWeight;
 LD   elevatorButtonStopPressed
#debug bool elevatorButtonStopPressed
 OR  
 LD   elevatorWeight
#debug int elevatorWeight
 EXTW 
 LD   elevatorMaximumWeight
#debug int elevatorMaximumWeight
 EXTW 
 GTS
 OR  
 WR   stopSignActivated
#debug_left bool stopSignActivated
#srcline 371 ;END_FUNCTION
 PRV  
 LDX  __fc__HandleStopConditions
 ULNK
RET
E     61
#endpou 

#pou prgMain
#srcline 373 ;PROGRAM prgMain

#struct prgMain__temp__
  int P0__st__,
  dint P1__st__
P     61
prgMain_L0:
 LINK __SizeOf(prgMain__temp__)
; Initialize - dynamic variables
; End initialize - dynamic variables
#srcline 387 ;  IF NOT configured THEN
 LD   configured
#debug bool configured
 NEG
 JMC  prgMain_L1
#srcline 388 ;    FOR index := 0 TO queueSize - 1 DO
 LD   int 0
 WRX  index
 LD   queueSize
#debug int queueSize
 EXTW 
 LD   int 1
 SUB
 EXTW
 WRY  P0__st__
prgMain_L3:
 LDX  index
 EXTW 
 LDY  P0__st__
 EXTW 
 GTS  
 JMD  prgMain_L4
 DBG  
#srcline 389 ;      queue[index] := queueDefaultValue;
 LD   queueDefaultValue
#debug int queueDefaultValue
 EXTW 
 LEA  queue
 LDX  index
#debug int index
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRIW 
#debug_left int queue[index]
#srcline 390 ;      queueLowerFloors[index] := queueDefaultValue;
 LD   queueDefaultValue
#debug int queueDefaultValue
 EXTW 
 LEA  queueLowerFloors
 LDX  index
#debug int index
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRIW 
#debug_left int queueLowerFloors[index]
#srcline 391 ;      queueUpperFloors[index] := queueDefaultValue;
 LD   queueDefaultValue
#debug int queueDefaultValue
 EXTW 
 LEA  queueUpperFloors
 LDX  index
#debug int index
 EXTW 
 RCHK 4   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRIW 
#debug_left int queueUpperFloors[index]
#srcline 392 ;    END_FOR;
 LDX  index
 LD   1
 ADD  
 EXTW 
 WRX  index
 JMP  prgMain_L3
prgMain_L4:
 NOP  -1
#srcline 393 ;    elevatorDoorsOpened[elevatorFloor] := TRUE;
 LD   bool -1       ; true
 LEA  elevatorDoorsOpened
 LD   elevatorFloor
#debug int elevatorFloor
 EXTW 
 RCHK 4   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool elevatorDoorsOpened[elevatorFloor]
#srcline 394 ;    configured := TRUE;
 LD   bool -1       ; true
 WR   configured
#debug_left bool configured
#srcline 395 ;  END_IF;
prgMain_L1:
#srcline 397 ;  IsAnyObstaclePresent();
 LEA  __Instance__IsAnyObstaclePresent
 CAL  IsAnyObstaclePresent_L0
#srcline 398 ;  HandleStopConditions();
 LEA  __Instance__HandleStopConditions
 CAL  HandleStopConditions_L0
#srcline 399 ;  HandleButtons();
 LEA  __Instance__HandleButtons
 CAL  HandleButtons_L0
#srcline 400 ;  IF NOT IsQueueEmpty() THEN
 LEA  __Instance__IsQueueEmpty
 CAL  IsQueueEmpty_L0
 NEG
 JMC  prgMain_L5
#srcline 401 ;    // store movement start floor - for queue sorting (option 2)
#srcline 402 ;    IF elevatorDirection = 0 THEN
 LD   elevatorDirection
#debug int elevatorDirection
 EXTW 
 LD   int 0
 EQ
 JMC  prgMain_L7
#srcline 403 ;      elevatorFloorStart := elevatorFloor;
 LD   elevatorFloor
#debug int elevatorFloor
 EXTW 
 WR   elevatorFloorStart
#debug_left int elevatorFloorStart
#srcline 404 ;    END_IF;
prgMain_L7:
#srcline 406 ;    IF selectedSortOption = 1 THEN BubbleSortQueue();
 LD   selectedSortOption
#debug int selectedSortOption
 EXTW 
 LD   int 1
 EQ
 JMC  prgMain_L9
 LEA  __Instance__BubbleSortQueue
 CAL  BubbleSortQueue_L0
#srcline 407 ;    ELSIF selectedSortOption = 2 THEN ElevatorSortQueue();
 JMP  prgMain_L10
prgMain_L9:
 LD   selectedSortOption
#debug int selectedSortOption
 EXTW 
 LD   int 2
 EQ
 JMC  prgMain_L11
 LEA  __Instance__ElevatorSortQueue
 CAL  ElevatorSortQueue_L0
#srcline 408 ;    END_IF;
 JMP  prgMain_L10
prgMain_L11:
prgMain_L10:
#srcline 409 ;    queuedFloor := queue[0];
 LD   queue[0]
#debug int queue[0]
 EXTW 
 WRX  queuedFloor
#debug_left int queuedFloor
#srcline 410 ;    floorDifference := elevatorFloor - queuedFloor;
 LD   elevatorFloor
#debug int elevatorFloor
 EXTW 
 LDX  queuedFloor
#debug int queuedFloor
 EXTW 
 SUB
 EXTW
 WRX  floorDifference
#debug_left int floorDifference
#srcline 411 ;    IF floorDifference > 0 THEN
 LDX  floorDifference
#debug int floorDifference
 EXTW 
 LD   int 0
 GTS
 JMC  prgMain_L12
#srcline 412 ;      elevatorDirection := -1;
 LD   int -1
 WR   elevatorDirection
#debug_left int elevatorDirection
#srcline 413 ;    ELSE
 JMP  prgMain_L13
prgMain_L12:
#srcline 414 ;      elevatorDirection := 1;
 LD   int 1
 WR   elevatorDirection
#debug_left int elevatorDirection
#srcline 415 ;    END_IF;
prgMain_L13:
#srcline 416 ;  END_IF;
prgMain_L5:
#srcline 417 ;  VisualizeQueue();
 LEA  __Instance__VisualizeQueue
 CAL  VisualizeQueue_L0
#srcline 418 ;  HandleDoors();
 LEA  __Instance__HandleDoors
 CAL  HandleDoors_L0
#srcline 419 ;  elevatorDirectionIndicator := elevatorDirection + 1;
 LD   elevatorDirection
#debug int elevatorDirection
 EXTW 
 LD   int 1
 ADD
 EXTW
 WR   elevatorDirectionIndicator
#debug_left int elevatorDirectionIndicator
#srcline 420 ;  // patro 1 smƒõr dolu patra 0 4 2 -> 2 2 ve queue ahahahahaaaaaaaaaaa
#srcline 421 ;  CASE switchCase OF
 LD   switchCase
#debug int switchCase
 EXTW 
 WRY  P1__st__
 LD   0
 LDY  P1__st__
 EQ  
 JMC  prgMain_L15
#srcline 422 ;    0: 
#srcline 423 ;      timeDelayed := timePLC + waitTime;
 LD   timePLC
#debug int timePLC
 EXTW 
 LD   waitTime
#debug int waitTime
 EXTW 
 ADD
 EXTW
 WR   timeDelayed
#debug_left int timeDelayed
#srcline 424 ;      switchCase := 1;
 LD   int 1
 WR   switchCase
#debug_left int switchCase
#srcline 425 ;      waitTime := elevatorFloorTravelTime;
 LD   elevatorFloorTravelTime
#debug int elevatorFloorTravelTime
 EXTW 
 WR   waitTime
#debug_left int waitTime
 JMP  prgMain_L14
prgMain_L15:
 LD   1
 LDY  P1__st__
 EQ  
 JMC  prgMain_L16
#srcline 426 ;    1:
#srcline 427 ;      IF timeDelayed = timePLC THEN
 LD   timeDelayed
#debug int timeDelayed
 EXTW 
 LD   timePLC
#debug int timePLC
 EXTW 
 EQ
 JMC  prgMain_L17
#srcline 428 ;        // floor stop
#srcline 429 ;        IF HandleMovement() THEN
 LEA  __Instance__HandleMovement
 CAL  HandleMovement_L0
 JMC  prgMain_L19
#srcline 430 ;          // at floor queue[0] (first desired)
#srcline 431 ;          waitTime := elevatorFloorDoorsOpenTime;
 LD   elevatorFloorDoorsOpenTime
#debug int elevatorFloorDoorsOpenTime
 EXTW 
 WR   waitTime
#debug_left int waitTime
#srcline 432 ;          forceOpenCurrentElevatorFloorDoor := TRUE;
 LD   bool -1       ; true
 WR   forceOpenCurrentElevatorFloorDoor
#debug_left bool forceOpenCurrentElevatorFloorDoor
#srcline 433 ;        ELSE
 JMP  prgMain_L20
prgMain_L19:
#srcline 434 ;          forceOpenCurrentElevatorFloorDoor := FALSE;
 LD   bool 0       ; false
 WR   forceOpenCurrentElevatorFloorDoor
#debug_left bool forceOpenCurrentElevatorFloorDoor
#srcline 435 ;        END_IF;
prgMain_L20:
#srcline 436 ;        switchCase := 0;
 LD   int 0
 WR   switchCase
#debug_left int switchCase
#srcline 437 ;      END_IF;
prgMain_L17:
 JMP  prgMain_L14
prgMain_L16:
prgMain_L14:
#srcline 439 ;END_PROGRAM
 ULNK
RET
E     61
#endpou 



 

#srcfile ''
